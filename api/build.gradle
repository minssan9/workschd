plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'org.cyclonedx.bom' version '1.7.4'
    id 'org.sonarqube' version '3.0'
}

ext {
    projectGroup = 'com.voyagerss'
    springBootVersion = '3.3.3'
    log4j2Version = '2.15.0'
    queryDslVersion = "5.0.0"
    projectVersion = '0.0.1-' + new Date().format('yyyyMMddHHmmss')
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url "https://repo.maven.apache.org/maven2/"}

    maven { url 'https://repo.spring.io/snapshot' }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'jacoco'

    group projectGroup
    version '1.0'
    sourceCompatibility = JavaVersion.VERSION_17
    configurations {
        compileOnly { extendsFrom annotationProcessor }
    }

    repositories {
        mavenCentral()
        maven {
            url "https://repo.spring.io/release"
        }
        maven {
            url "https://repository.jboss.org/maven2"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
        runtimeOnly 'com.mysql:mysql-connector-j'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    dependencyManagement {
        imports {
//            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    test {
        systemProperty 'spring.profiles.active', 'local'
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}

//  ./gradlew clean :codeCoverageReport

task codeCoverageReport(type: JacocoReport) {
    // Jacoco 실행 데이터 파일을 지정
    executionData fileTree(dir: project.rootDir, include: "**/build/jacoco/*.exec")

    // 각 서브 프로젝트의 소스셋을 추가
    subprojects {
        afterEvaluate { subproject ->
            if (subproject.plugins.hasPlugin('java')) {
                sourceSets subproject.sourceSets.main
                additionalSourceDirs.from = files(subproject.sourceSets.main.allSource.srcDirs)
                sourceDirectories.from = files(subproject.sourceSets.main.allSource.srcDirs)
                classDirectories.from = files(subproject.sourceSets.main.output)
                executionData(subproject.fileTree(dir: "${subproject.buildDir}/jacoco", include: "*.exec"))
            }
        }
    }

    // 리포트 생성 설정
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
}

//// JaCoCo 실행 데이터를 병합하는 task
//task jacocoMerge(type: JacocoMerge, group: 'verification') {
//    destinationFile = file("${buildDir}/jacoco/merged.exec")
//
//    subprojects.each { subproject ->
//        subproject.plugins.withType(JavaPlugin) {
//            // 각 서브프로젝트의 test task로부터 실행 데이터 추가
//            executionData subproject.tasks.withType(Test)
//        }
//    }
//}
//
//// 통합된 코드 커버리지 리포트를 생성하는 task
//task codeCoverageReport(type: JacocoReport, dependsOn: jacocoMerge) {
//    reports {
//        xml.required.set(true)
//        html.required.set(true)
//        csv.required.set(false)
//    }
//
//    // 병합된 실행 데이터 파일 사용
//    executionData file("${buildDir}/jacoco/merged.exec")
//
//    // 모든 서브프로젝트의 소스 디렉토리 및 클래스 파일 추가
//    subprojects.each { subproject ->
//        subproject.plugins.withType(JavaPlugin) {
//            additionalSourceDirs.from subproject.sourceSets.main.allSource.srcDirs
//            sourceDirectories.from subproject.sourceSets.main.allSource.srcDirs
//            classDirectories.from subproject.sourceSets.main.output
//        }
//    }
//}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
//task jacocoMerge(type: JacocoMerge, group: 'verification') {
//    subprojects.each { subproject ->
//        executionData subproject.tasks.withType(Test)
//    }
//}


//  ./gradlew clean :api:test sonarqube
