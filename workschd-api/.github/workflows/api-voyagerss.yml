name: api-voyagerss CI/CD

on:
  push:
    branches: [ release ] # release  push될 때 CD가 일어나도록 핸들링

env:
  VERSION: ${{ github.sha }}
  DO_REPOSITORY_FULL_PATH: ${{ secrets.DO_REGISTRY}}/${{github.event.repository.name}}_${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss # 다른 포맷으로 변경 가능(MomentJS format syntax)
          utcOffset: "+09:00" # 한국 시간에 맞추기 위함

      - name: Set Git Revision
        id: set_revision
        run: echo "REVISION=${GITHUB_SHA}" >> $GITHUB_ENV


      - name: Set up JDK 17
        uses: actions/setup-java@v1 # 최신 버전을 쓰고 싶었으나 이슈가 생겨서 기존에 CI에서 쓰던 버전 사용
        with:
          java-version: 17

      - name: Checkout
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew :clean :api:build -x test --no-daemon
        shell: bash

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: api/build/libs/*.jar

#      - name: Log in to the Container registry
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.DO_REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          path: api/build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.DO_REPOSITORY_FULL_PATH }}:${{ env.VERSION }}
#          platforms: linux/arm64

      - name: Install SSH
        run: sudo apt-get install openssh-client -y

      - name: Resolve IP address from domain
        run: echo "::set-output name=ip::$(dig +short en9doors.com)"

  deploy:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref_name == 'release'

    steps:
      - name: Deploy to DigitalOcean Droplet@Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DROPLET_HOST}}
          username: ${{secrets.DROPLET_USERNAME}}
          password: ${{secrets.DROPLET_KEY}}
          script: |
            sudo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.DO_REGISTRY }} -u ${{ github.actor }} --password-stdin
            sudo docker pull ${{ env.DO_REPOSITORY_FULL_PATH }}:${{env.VERSION}} || true
            sudo docker tag ${{ env.DO_REPOSITORY_FULL_PATH }}:${{env.VERSION}} ${{ env.DO_REPOSITORY_FULL_PATH }}:latest || true
            sudo docker stop ${{github.event.repository.name }} || true
            sudo docker rm -f ${{github.event.repository.name }} || true
        continue-on-error: true

      - name: Deploy to DigitalOcean Droplet@Run
        env:
          ENV_VARS: ${{ secrets.ENV_DO_VARS }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DROPLET_HOST}}
          username: ${{secrets.DROPLET_USERNAME}}
          password: ${{secrets.DROPLET_KEY}}
          script: |
            echo "Checking ENV_VARS content (safely):"            
             
            echo "${{ secrets.ENV_DO_VARS }}" >> /home/root/do-release.env
            echo "cat /home/root/do-release.env"
            
            sudo docker run -it -d --name=${{github.event.repository.name }} --restart=always \
              -p 34001:34001 -m 1900m \
              -v /var/log:/var/log \
              -e SPRING_PROFILES_ACTIVE=${{ github.ref_name }} \
              --env-file /home/root/do-release.env \
              ${{ env.DO_REPOSITORY_FULL_PATH }}:${{env.VERSION}}

#            rm temp_env_file
#  sudo docker run -it -d --name=${{github.event.repository.name }} --restart=always \
#  -p 34001:34001 -m 1900m \
#  -v /var/log:/var/log \
#  -e SPRING_PROFILES_ACTIVE=${{ github.ref_name }} \
#  -e do.url=${{ secrets.DO_DB_HOST }} \
#  -e do.username=${{ secrets.DO_DB_USERNAME }} \
#  -e do.passwd=${{ secrets.DO_DB_PASSWORD }} \
#  -e cloud.aws.credentials.accessKey=${{ secrets.DO_ACCESS_KEY_ID }} \
#  -e cloud.aws.credentials.secretKey=${{ secrets.DO_SECRET_ACCESS_KEY }} \
#  ${{ env.DO_REPOSITORY_FULL_PATH }}:${{env.VERSION}}

#docker stop en9door_api && docker rm en9door_api
#sudo docker run -it -d --name=en9door_api --restart=always --privileged \
#  -p 34001:34001 -m 1900m \
#  -v /var/log:/var/log \
#  -e SPRING_PROFILES_ACTIVE=release \
#  --env-file /home/root/release.env \
#  ghcr.io/minssan9/en9door_api_release:latest